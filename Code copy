#!/usr/bin/env python3
from math import *
import rclpy
from rclpy.node import Node

from std_msgs.msg import Float64 , UInt32
from ros_gz_interfaces.msg import ParamVec

import sys, select, termios, tty


class PIDController:
    def __init__(self, kp, ki, kd, ,dt):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.dt=dt
        self.setpoint = 0
        self.prev_error = 0
        self.integral = 0

    def compute(self, current_value):
        error = self.setpoint - current_value
        self.integral += error
        derivative = (error - self.prev_error)/self.dt

        output = (self.kp * error) + (self.ki * self.integral) + (self.kd * derivative)

        self.prev_error = error
        return output


    def pid(kp,ki,kd,e):
        # Paramètres du PID
        # kp = 0.1
        # ki = 0.01
        # kd = 0.05
        epsilon=e


        setpoint = 100  # Valeur cible donc mettre self.range

        # Initialisation du contrôleur PID
        pid_controller = PIDController(kp, ki, kd, setpoint)

        # Simulation du système
        current_value = 50  # Valeur initiale
        # time_steps = 100

        # for _ in range(time_steps):
        while current_value < setpoint -epsilon and current_value > setpoint + epsilon
            # Calcul de la sortie du contrôleur PID
            control_output = pid_controller.compute(current_value)

            # Appliquer la sortie du contrôleur au système (simulation)
            # Dans une application réelle, cela dépendra du système physique que vous contrôlez.
            current_value += control_output

            # Affichage des résultats
            print("Current Value:", current_value, "\tControl Output:", control_output)


class TeleopKeyboard(Node):
    def __init__(self):
        super().__init__('teleop_keyboard')
        self.bearing=0
        self.range=500
        self.phase=1
        self.xphase=20
        self.main_turn_pub = self.create_publisher(Float64, '/wamv/thrusters/main/pos', 5)
        self.main_speed_pub = self.create_publisher(Float64, '/wamv/thrusters/main/thrust', 5)
        self.main_bouee=self.create_subscription(ParamVec, '/wamv/sensors/acoustics/receiver/range_bearing',self.callback,5)
        self.PID_mot=PIDController()
        self.PID_dir=PIDController()
        self.main_phase=self.create_subscription(UInt32, '/vrx/patrolandfollow/current_phase',self.callback_phase,5)
        
        self.get_logger().info('Lancement du programme Code by hydronauts')
        self.main_timer=self.create_timer(0.1,self.run)

    def callback(self,msg):
        for param in msg.params:
            if param.name=='bearing':
                self.bearing=param.value.double_value
            if param.name=='range':
                self.range=param.value.double_value
        
   
    def callback_phase(self,msg):
        self.phase=msg.data
        

    def vels(self, speed, turn):
        return "currently:\tspeed %s\tturn %s " % (speed,turn)
    
    def mot(self):
        gain=50
        return max(0,min(12000,gain*(self.range-self.xphase)))

    def dir(self):
        gain=0.01
        return min(pi/4,max(-pi/4,-gain*self.bearing))
    
    def mot_pid(self):
    gain=50
    return max(0,min(12000,gain*(self.range-self.xphase)))

    def dir_pid(self):
        gain=0.01
        return min(pi/4,max(-pi/4,-gain*self.bearing))

    def mot1_2(self):
        return(1000)

    def dir1_2(self):
        gain=0.01
        return min(pi/4,max(-pi/4, gain* (self.bearing+pi)))

    

    def run(self):
        speed = 0.0
        turn = 0.0
        speed_limit = 12000.0
        turn_limit = 0.78539816339
        
        x=50
        try:
            if self.phase ==1 :
                print (self.range)
                speed=float(self.mot())
                turn=float(self.dir())
                print(self.vels(speed,turn))
                print('phase=1')
                speed_msg = Float64()
                turn_msg = Float64()
                speed_msg.data = speed
                turn_msg.data = turn
        
                self.main_turn_pub.publish(turn_msg)
                self.main_speed_pub.publish(speed_msg)

            elif self.phase == 2 : 
                print(self.range)
                if self.range < x :
                    speed=float(self.mot1_2())
                    turn=float(self.dir1_2())
                    print(self.vels(speed,turn))
                    print('phase=2')
                    speed_msg = Float64()
                    turn_msg = Float64()
                    speed_msg.data = speed
                    turn_msg.data = turn
            
                    self.main_turn_pub.publish(turn_msg)
                    self.main_speed_pub.publish(speed_msg)

                else :
                    speed=0.0
                    turn=0.0
                    print('STOP')
                    speed_msg = Float64()
                    turn_msg = Float64()
                    speed_msg.data = speed
                    turn_msg.data = turn
            
                    self.main_turn_pub.publish(turn_msg)
                    self.main_speed_pub.publish(speed_msg)


            # speed=float(self.mot())
            # turn=float(self.dir())
            # print(self.vels(speed,turn))

            speed_msg = Float64()
            turn_msg = Float64()
            speed_msg.data = speed
            turn_msg.data = turn
            
            self.main_turn_pub.publish(turn_msg)
            self.main_speed_pub.publish(speed_msg)

        except Exception as e:
            print(e)


def main(args=None):
    rclpy.init(args=args)

    teleop_keyboard = TeleopKeyboard()

    rclpy.spin(teleop_keyboard)
    
    teleop_keyboard.destroy_node()
    rclpy.shutdown()

if __name__ == "__main__":
    main()